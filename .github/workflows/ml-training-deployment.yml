name: ML Training & Deployment Pipeline

on:
  push:
    branches:
      - '**'

env:
  AWS_REGION: eu-north-1
  ECR_REPO: churn-prediction-repo
  CLUSTER_NAME: churn-prediction-cluster
  TASK_DEF_NAME: churn-prediction-task
  BUCKET_NAME: churn-prediction-data-asamane

jobs:
  detect-branch:
    name: 🧭 Detect Branch Context
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🪴 Show Branch Info
        run: |
          echo "🪴 Branch: ${GITHUB_REF_NAME}"


  infrastructure:
    name: 📦 Provision Infrastructure (Terraform)
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🧱 Initialize & Apply Terraform
        working-directory: infrastructure/terraform
        run: |
          terraform init
          terraform plan
          terraform apply -auto-approve


  build-and-push-image:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: infrastructure

    env:
      SUBNET_ID: ${{ secrets.SUBNET_ID }}
      SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS \
          --password-stdin "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com"

      - name: 🏗️ Build and Tag Docker Image
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:latest"
          docker build -t churn-prediction .
          docker tag churn-prediction:latest $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: 📤 Push Image to ECR
        run: docker push $IMAGE_URI


  deploy-to-ecs:
    name: 🚀 Deploy Model via ECS
    runs-on: ubuntu-latest
    needs: build-and-push-image

    env:
      SUBNET_ID: ${{ secrets.SUBNET_ID }}
      SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}

    steps:
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🛳️ Run ECS Inference Task
        run: |
          aws ecs run-task \
            --cluster $CLUSTER_NAME \
            --launch-type FARGATE \
            --task-definition $TASK_DEF_NAME \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}"


  promote-to-prod:
    name: 🏁 Simulate Promotion to Production
    runs-on: ubuntu-latest
    needs: deploy-to-ecs
    if: success()  # Only runs if all previous jobs passed

    steps:
      - name: 🚨 Check Evaluation Result (Simulated)
        run: |
          echo "✅ Evaluation passed accuracy threshold (e.g., > 0.85)"
          echo "🚀 Promoting model to production..."
          echo "💡 In real scenarios: copy model to s3://.../production/, tag image, or update API endpoint."
